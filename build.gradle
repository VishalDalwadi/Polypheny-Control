
group "org.polypheny"


def versionMajor = 0
def versionMinor = 3
def versionQualifier = "-SNAPSHOT"
version = versionMajor + "." + versionMinor + versionQualifier


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // Shadowing; used to make a fat jar (https://github.com/johnrengelman/shadow)
        classpath group: "com.github.jengelman.gradle.plugins", name: "shadow", version: "5.0.0"
        // Lombok (https://plugins.gradle.org/plugin/io.freefair.lombok)
        classpath group: "io.freefair.gradle", name: "lombok-plugin", version: "3.6.6"
        //
        classpath group: "com.netflix.nebula", name: "gradle-ospackage-plugin", version: "4.9.3"
    }
}


repositories {
    mavenLocal()
    maven {
        // DBIS Nexus
        url "https://dbis-nexus.dmi.unibas.ch/repository/maven2/"
    }
    maven {
        // Gradle tooling API
        url "https://repo.gradle.org/gradle/libs-releases-local/"
    }
    mavenCentral()
    jcenter()
}


apply plugin: "java"
apply plugin: "maven"
apply plugin: "idea"
apply plugin: "application"
apply plugin: "io.freefair.lombok"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "nebula.ospackage-application"


mainClassName = "org.polypheny.control.main.Main"


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}


configurations {
    webjars
}


dependencies {
    // Log4J
    compile group: "org.slf4j", name: "slf4j-api", version: "1.7.26"    // License: MIT
    compile group: "org.apache.logging.log4j", name: "log4j-slf4j-impl", version: "2.12.1" // License: Apache 2.0
    compile group: "org.apache.logging.log4j", name: "log4j-core", version: "2.12.1"   // License: Apache 2.0
    compile group: "org.apache.logging.log4j", name: "log4j-api", version: "2.12.1"

    ////// CONFIGURATION MANAGEMENT
    compile group: "com.typesafe", name: "config", version: "1.3.2" // Apache 2.0

    // Apache Stuff
    compile group: "org.apache.commons", name: "commons-lang3", version: "3.9" // Apache 2.0
    compile group: "commons-io", name: "commons-io", version: "2.6" // Apache 2.0

    compile group: "com.google.guava", name: "guava", version: "28.1-jre" // Apache 2.0
    compile group: "com.github.rvesse", name: "airline", version: "2.7.2"
    compile(group: "com.sparkjava", name: "spark-core", version: "2.5.5")
    compile group: "com.google.code.gson", name: "gson", version: "2.8.5"
    compile group: "com.googlecode.json-simple", name: "json-simple", version: "1.1.1"


    compile group: "org.jvnet.winp", name: "winp", version: "1.28" // MIT

    compile group: "org.eclipse.jgit", name: "org.eclipse.jgit", version: "5.5.0.201909110433-r"
    compile group: "org.gradle", name: "gradle-tooling-api", version: "5.6.2"


    // Webjar (JS libraries)
    webjars group: "org.webjars", name: "font-awesome", version: "5.10.1"
    webjars group: "org.webjars", name: "jquery", version: "3.4.1"
    webjars group: 'org.webjars.npm', name: 'jquery-serializejson', version: '2.9.0'
    webjars group: 'org.webjars.npm', name: 'ansi_up', version: '2.0.2'

    //compile(group: "org.jfrog.artifactory.client", name: "artifactory-java-client-services", version: "+")

    //
    testCompile group: "junit", name: "junit", version: "4.11"
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources", "${buildDir}/webjars-content"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}



/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "Databases and Information Systems Group, Department Mathematics and Computer Science, University of Basel, Switzerland"
        attributes "Version": "$version"
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
shadowJar {
    classifier = ""
}
assemble.dependsOn shadowJar
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives shadowJar // fat jar which additionally contains all dependencies
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files

    archives distTar // distribution tar containing the jar and its dependencies together with start scripts for UNIX and Windows
    archives distZip // distribution zip
    archives buildDeb // Debian Package
}


ospackage {
    provides "${project.name}"
    release(new Date().format("yyyyMMddHHmmss"))

    link("/usr/local/bin/${project.name}", "${ospackage_application.prefix}/${project.name}/bin/${project.name}")

    requires("java8-runtime-headless")
}

ospackage_application {
    //prefix = "/usr/local" // default is "/opt"
}

// Disable automatically added shadowed zip / tar archives
shadowDistTar.enabled = false
shadowDistTar.classifier = "REMOVE_ME"
shadowDistZip.enabled = false
shadowDistZip.classifier = "REMOVE_ME"
configurations.archives.artifacts.with { archives ->
    def archivesIterator = archives.iterator()
    while (archivesIterator.hasNext()) {
        def archive = archivesIterator.next()
        if (archive.classifier.equals("REMOVE_ME")) {
            //println "Shadow archive to delete: ${archive}"
            archivesIterator.remove()
        }
    }
}


task extractWebjars(type: Copy) {
    configurations.webjars.each {jar ->
        from zipTree(jar)
        into "$buildDir/webjars"
    }
    doLast {
        copy {
            from "${buildDir}/webjars/META-INF/resources/webjars"
            into file("${buildDir}/webjars-content/static")
        }
    }
}
classes.dependsOn(extractWebjars)


//////////////
// IntelliJ //
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")
    }
}
