
plugins {
    id "java-library"
    id "application"
    id "maven-publish"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "io.freefair.lombok" version "5.3.0"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0"
}

import org.jetbrains.gradle.ext.*

group "org.polypheny"

def versionMajor = 1
def versionMinor = 3
def versionQualifier = "-SNAPSHOT"
version = versionMajor + "." + versionMinor + versionQualifier

mainClassName = "org.polypheny.control.main.Main"


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        // Gradle tooling API
        url "https://repo.gradle.org/gradle/libs-releases-local/"
    }
    maven {
        // DBIS Nexus
        url "https://dbis-nexus.dmi.unibas.ch/repository/maven2/"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources", "${buildDir}/webjars-content"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}


configurations {
    webjars
}


dependencies {
    // Log4J
    implementation group: "org.slf4j", name: "slf4j-api", version: "1.7.30" // MIT
    implementation group: "org.apache.logging.log4j", name: "log4j-slf4j-impl", version: "2.13.1" // Apache 2.0
    implementation group: "org.apache.logging.log4j", name: "log4j-core", version: "2.13.1" // Apache 2.0
    implementation group: "org.apache.logging.log4j", name: "log4j-api", version: "2.13.1" // Apache 2.0

    // Configuration management
    implementation group: "com.typesafe", name: "config", version: "1.3.2" // Apache 2.0

    // Apache Commons Stuff
    implementation group: "org.apache.commons", name: "commons-lang3", version: "3.9" // Apache 2.0
    implementation group: "commons-io", name: "commons-io", version: "2.6" // Apache 2.0
    implementation group: "commons-codec", name: "commons-codec", version: "1.15" // Apache 2.0

    implementation group: "com.google.guava", name: "guava", version: "30.1-jre" // Apache 2.0

    // CLI Library
    implementation group: "com.github.rvesse", name: "airline", version: "2.8.0" // Apache 2.0

    // HTTP Server
    implementation group: "io.javalin", name: "javalin", version: "3.12.0" // Apache 2.0

    // REST requests (for connector lib)
    implementation group: "com.konghq", name: "unirest-java", version: "3.11.11" // MIT
    implementation group: "org.java-websocket", name: "Java-WebSocket", version: "1.5.1" // MIT

    // JSON libs
    implementation group: "com.google.code.gson", name: "gson", version: "2.8.6" // Apache 2.0
    implementation group: "com.googlecode.json-simple", name: "json-simple", version: "1.1.1" // Apache 2.0

    // Kill process tree in Windows
    implementation group: "org.jvnet.winp", name: "winp", version: "1.28" // MIT

    // Git and Gradle integration
    implementation group: "org.eclipse.jgit", name: "org.eclipse.jgit", version: "5.10.0.202012080955-r" // EDL
    implementation group: "org.gradle", name: "gradle-tooling-api", version: "6.8.3" // Apache 2.0

    // Webjar (JS libraries)
    webjars group: "org.webjars", name: "font-awesome", version: "5.15.1" // MIT, SIL OFL, and CC BY licenses
    webjars group: "org.webjars", name: "jquery", version: "3.5.1" // MIT
    webjars group: "org.webjars.npm", name: "jquery-serializejson", version: "2.9.0" // MIT
    webjars group: "org.webjars.npm", name: "ansi_up", version: "2.0.2" // MIT
    webjars group: "org.webjars.npm", name: "tooltipster", version: "4.2.7" // MIT


    // -- Testing --
    testImplementation group: "junit", name: "junit", version: "4.13"
}


/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Implementation-Version": project.version
        attributes "Multi-Release": "true"
        attributes "Version": project.version
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
shadowJar {

}
assemble.dependsOn shadowJar
artifacts {
    archives jar // regular jar containing only the compiled source
    archives shadowJar // fat jar which additionally contains all dependencies
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
}

publishing {
    publications {
        "${project.name}"(MavenPublication) {
            from components.java
            artifact jar
            artifact source: sourcesJar, classifier: 'sources', extension: 'jar'
            artifact source: javadocJar, classifier: 'javadoc', extension: 'jar'
            pom {
                name = "Polypheny Control"
                description = "A tool for deploying and managing Polypheny-DB."
                url = "https://polypheny.org"
                licenses {
                    license {
                        name = "Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0"
                    }
                }
                scm {
                    connection = "https://github.com/polypheny/Polypheny-Control.git"
                    url = "https://github.com/polypheny/Polypheny-Control"
                }
            }
        }
    }
}
task generatePom(group: 'publishing', dependsOn: "generatePomFileFor${project.name.capitalize()}Publication")

// Disable automatically added shadowed zip / tar archives
shadowDistTar.enabled = false
shadowDistTar.classifier = "REMOVE_ME"
shadowDistZip.enabled = false
shadowDistZip.classifier = "REMOVE_ME"
configurations.archives.artifacts.with { archives ->
    def archivesIterator = archives.iterator()
    while (archivesIterator.hasNext()) {
        def archive = archivesIterator.next()
        if (archive.classifier.equals("REMOVE_ME")) {
            //println "Shadow archive to delete: ${archive}"
            archivesIterator.remove()
        }
    }
}

task finalize {
    doLast {
        println('finally!')
    }
}

task extractWebjars(type: Copy) {
    configurations.webjars.each {jar ->
        from zipTree(jar)
        into "$buildDir/webjars"
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    doLast {
        copy {
            from "${buildDir}/webjars/META-INF/resources/webjars"
            into file("${buildDir}/webjars-content/static")
        }
    }
}
classes.dependsOn(extractWebjars)


//////////////
// IntelliJ //
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")
    }
    project {
        settings {
            runConfigurations {
                "Polypheny Control (headless)"(Application) {
                    mainClass = mainClassName
                    moduleName = "Polypheny-Control.main"
                    programParameters = 'control'
                }
                "Polypheny Control (tray)"(Application) {
                    mainClass = mainClassName
                    moduleName = "Polypheny-Control.main"
                    programParameters = 'tray'
                }
            }
            copyright {
                useDefault = "ApacheLicense"
                profiles {
                    ApacheLicense {
                        notice = 'Copyright 2019-$today.year The Polypheny Project\n' +
                                '\n' +
                                'Licensed under the Apache License, Version 2.0 (the \"License\");\n' +
                                'you may not use this file except in compliance with the License.\n' +
                                'You may obtain a copy of the License at\n' +
                                '\n' +
                                'http://www.apache.org/licenses/LICENSE-2.0\n' +
                                '\n' +
                                'Unless required by applicable law or agreed to in writing, software\n' +
                                'distributed under the License is distributed on an \"AS IS\" BASIS,\n' +
                                'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n' +
                                'See the License for the specific language governing permissions and\n' +
                                'limitations under the License.'
                        keyword = "Copyright"
                    }
                }
            }
        }
    }
}